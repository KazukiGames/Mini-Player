[Rainmeter]
Update=100
AccurateText = 1
ContextTitle= | MiniPlayer Variables |
ContextAction=[]
ContextTitle2=> Edit Variables
ContextAction2=["#@#Variables.inc"]
ContextTitle3=-
ContextAction3=[]
ContextTitle4= | MiniPlayer Centering |
ContextAction4=[]
ContextTitle5= > 5% Offset
ContextAction5=[!WriteKeyValue Variables MiniPlayer-Centering 0.05 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh][!Delay 50][!Move "([#WorkAreaX]+[#MiniPlayer-Width]*0.05)" "[#CURRENTCONFIGY]"]
ContextTitle6= > 10% Offset
ContextAction6=[!WriteKeyValue Variables MiniPlayer-Centering 0.10 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh][!Delay 50][!Move "([#WorkAreaX]+[#MiniPlayer-Width]*0.10)" "[#CURRENTCONFIGY]"]
ContextTitle7= > 15% Offset
ContextAction7=[!WriteKeyValue Variables MiniPlayer-Centering 0.15 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh][!Delay 50][!Move "([#WorkAreaX]+[#MiniPlayer-Width]*0.15)" "[#CURRENTCONFIGY]"]
ContextTitle8= > 20% Offset
ContextAction8=[!WriteKeyValue Variables MiniPlayer-Centering 0.20 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh][!Delay 50][!Move "([#WorkAreaX]+[#MiniPlayer-Width]*0.20)" "[#CURRENTCONFIGY]"]
ContextTitle9= > Off
ContextAction9=[!WriteKeyValue Variables MiniPlayer-Centering 0 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh][!Delay 50][!Move "([#WorkAreaX])" "[#CURRENTCONFIGY]"]
ContextTitle10=-
ContextAction10=[]
ContextTitle11= | Foreground Shadow |
ContextAction11=[]
ContextTitle12= > On
ContextAction12=[!WriteKeyValue Variables MiniPlayer-Foreground-Shadow 1 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh]
ContextTitle13= > Off
ContextAction13=[!WriteKeyValue Variables MiniPlayer-Foreground-Shadow 0 "#SKINSPATH#MiniPlayer\@Resources\Variables.inc"][!Refresh]
ContextTitle14=-
ContextAction14=[]
ContextTitle15=Reload Settings 
ContextAction15=[!Refresh]
ContextTitle16=More Skin Options
ContextAction16=[!SkinMenu]
RightMouseUpAction=[!SkinCustomMenu]

[Metadata]
Name=Mini-Player supported by WebNowPlaying
Author=keifufu, tjhrulz, KazukiGames82
Information="MiniPlayer for Spotify or other player that support WebNowPlaying | Tested with WebNowPlaying 1.2.0.0"
Version=1.0.0
License=MIT

[Variables]
@IncludeVariables=#@#Variables.inc

; ==================================================================
; Measure Section
[GetSongTitle]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Title
Substitute="":"N/A"
OnChangeAction=[!UpdateMeter MiniPlayer-SongTitle][!UpdateMeter MiniPlayer-SongArtist][!UpdateMeter MiniPlayer-Rating][!Redraw]
UpdateDivider = 5

[GetSongArtist]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Artist
Substitute="":"N/A"
UpdateDivider = -1

; This will return the path to the cover art.
[MeasureAlbumArt]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Cover
; The DefaultPath will be returned when no cover art has been found.
DefaultPath=#@#Images[#MiniPlayer-Foreground-Shadow]\nocover.png
OnChangeAction=[!UpdateMeter MiniPlayer-AlbumArt][!Redraw]
UpdateDivider = 5

; The URL of the currently displayed image
; Note this is updated once a PlayerType=Cover has updated so it is safe to assume that the image has been updated
[MeasureAlbumArtAddress]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=CoverWebAddress
UpdateDivider = 5
OnChangeAction=[!UpdateMeter MiniPlayer-AlbumArt][!Redraw]

; Elapsed time in hh:mm:ss or mm:s
[MeasurePosition]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Position
UpdateDivider = 5
OnChangeAction=[!UpdateMeter MiniPlayer-Progress][!Redraw]
Substitute="":"N/A"

; Duration in hh:mm:ss or mm:ss
[MeasureDuration]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Duration
UpdateDivider = 5
OnChangeAction=[!UpdateMeter MiniPlayer-Duration][!Redraw]
Substitute="":"N/A"

; Percent of elapsed time, out of 100.
[MeasureProgress]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Progress
UpdateDivider = 1
OnChangeAction=[!UpdateMeter MiniPlayer-ProgressBar][!Redraw]
Substitute="":"N/A"

; Volume from 1-100
[MeasureVolume]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Volume
Substitute="":"N/A"
OnChangeAction=[!UpdateMeter MiniPlayer-VolumeBar][!UpdateMeter MiniPlayer-Volume][!Redraw]
UpdateDivider = 1

; The playing state ; 0 = Stopped ; 1 = Playing ; 2 = Paused
[MeasurePlayPause]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=State
Substitute="0":"Play","1":"Pause","2":"Play","3":"Replay"
OnChangeAction=[!UpdateMeter MiniPlayer-PlayPause][!Redraw]

; The repeat state ; 0 = Off ; 1 = Repeat One ; 2 = Repeat All
[MeasureRepeat]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Repeat
OnChangeAction=[!UpdateMeter MiniPlayer-Repeat][!UpdateMeter MiniPlayer-Dots][!Redraw]

; The shuffle state ; 0 = Off ; 1 = On
[MeasureShuffle]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Shuffle
;A n example of how to color the shuffle icon based on the shuffle state
OnChangeAction=[!UpdateMeter MiniPlayer-Shuffle][!UpdateMeter MiniPlayer-Dots][!Redraw]

; The rating of the current song from 0-5
; Since most sites now only support a binary rating system (eg: like, dislike)
; 0 = No rating
; 1 = Dislike / Negative rating
; 5 = Like / Positive rating

[MeasureRating]
Measure=Plugin
Plugin=WebNowPlaying
PlayerType=Rating
; An example of how to color two rating icons based on the rating
OnChangeAction=[!UpdateMeter MiniPlayer-Rating][!Redraw]

[MiniPlayer-Calc]
Measure = Calc
UpdateDivider = -1

; ==========================================================================================
; MeterStyles for <Meters> :D
[Base]
AntiAlias=1
DynamicVariables=1
UpdateDivider=-1

[String]
InlineSetting=Face | SF Pro Rounded
InlineSetting2 = Shadow | 0 | 1 | 2 | 0,0,0,(255*[#MiniPlayer-Foreground-Shadow])
InlineSetting3 = Size | (6*[#MiniPlayer-Scale])
FontColor=[#MiniPlayer-Foreground-Color]
StringAlign=LeftCenter
ClipString=2
TrailingSpaces=1

[Icon]
W=(20*[#MiniPlayer-Scale])
H=(20*[#MiniPlayer-Scale])

; ==========================================================================================
; First thing to add is a Background to MiniPlayer.
[MiniPlayer-Background]
Meter=Shape
MeterStyle=Base
Shape=Rectangle 0,0,([#MiniPlayer-Width]-[#MiniPlayer-Offset]*2),([#MiniPlayer-Height]*[#MiniPlayer-Scale]),[#MiniPlayer-Radius] | FillColor [#MiniPlayer-Border-Color] | StrokeWidth 0
Shape2=Rectangle [#MiniPlayer-Border],[#MiniPlayer-Border],([#MiniPlayer-Width]-([#MiniPlayer-Border]+[#MiniPlayer-Offset])*2),([#MiniPlayer-Height]*[#MiniPlayer-Scale]-[#MiniPlayer-Border]*2),([#MiniPlayer-Radius]<=1?0:([#MiniPlayer-Radius]-1)) | FillColor [#MiniPlayer-Background-Color] | StrokeWidth 0

; ==========================================================================================
; Second thing is add a container to save the AlbumArt.
[AlbumArt-Container]
Meter=Shape
MeterStyle=Base
X=([#Item-Padding]*[#MiniPlayer-Scale])
Y=([#Item-Padding]*[#MiniPlayer-Scale])
Shape=Rectangle 0,0,([MiniPlayer-Background:H]-[AlbumArt-Container:X]*2),([MiniPlayer-Background:H]-[AlbumArt-Container:Y]*2),(4*[#MiniPlayer-Scale]) | FillColor 255,255,255 | StrokeWidth 0

[MiniPlayer-AlbumArt]
Meter=Image
MeterStyle=Base
MeasureName=MeasureAlbumArt
w=[AlbumArt-Container:W]
h=[AlbumArt-Container:H]
SolidColor=[#MiniPlayer-Background-Color]
PreserveAspectRatio=2
Container=AlbumArt-Container

; ==========================================================================================
; Thirth thing is add a container to save the Song Title and Song Artist and define a limit.
[SongInfo-Container]
Meter=Shape
MeterStyle=Base
X=([#Item-Padding]*[#MiniPlayer-Scale])R
Y=r
Shape=Rectangle 0,0,([ProgressBar-Container:X]-[SongInfo-Container:X]-[MiniPlayer-Progress:W]-[MiniPlayer-Rating:W]*2-[#Item-Padding]*3*[#MiniPlayer-Scale]),([MiniPlayer-Background:H]-[AlbumArt-Container:Y]*2),4 | FillColor 255,255,255 | StrokeWidth 0

[MiniPlayer-SongTitle]
Meter=String
MeterStyle=Base | String
MeasureName=GetSongTitle
Y=([MiniPlayer-SongTitle:H]/2)r
H=([MiniPlayer-Background:H]-[AlbumArt-Container:Y]*2)
InlinePattern3=^(.*)#CRLF#
InlineSetting3 = Weight | 1000
InlinePattern4=(.*)#CRLF#
InlineSetting4 = Size | (8*[#MiniPlayer-Scale])
InlinePattern5=#CRLF#(.*)
InlineSetting5=Size | (6*[#MiniPlayer-Scale])
InlinePattern6=#CRLF#(.*)
InlineSetting6=Color | 0,0,0,0
FontColor=[#Text-Song-Title-Color]
Text="%1#CRLF#A"
Container=SongInfo-Container

[MiniPlayer-SongArtist]
Meter=String
MeterStyle=Base | String
MeasureName=GetSongArtist
Y=r
H=([MiniPlayer-Background:H]-[AlbumArt-Container:Y]*2)
InlinePattern3=(.*)#CRLF#
InlineSetting3 = Size | (8*[#MiniPlayer-Scale])
InlinePattern4=(.*)#CRLF#
InlineSetting4 = Color | 0,0,0,0
InlinePattern5=#CRLF#^(.*)
InlineSetting5= Weight | 300
InlinePattern6=#CRLF#(.*)
InlineSetting6=Size | (6*[#MiniPlayer-Scale])
FontColor=[#Text-Song-Artist-Color]
Text="A#CRLF#%1"
Container=SongInfo-Container

; ==========================================================================================
; Fourth thing is add a container to save the progress bar.
[ProgressBar-Container]
Meter=Shape
Meterstyle=Base
Shape=Rectangle 0,0,[#ProgressBar-Width],(2*[#MiniPlayer-Scale]),(2*[#MiniPlayer-Scale]) | FillColor 255,255,255 | StrokeWidth 0
X=([MiniPlayer-Background:W]/2-[ProgressBar-Container:W]/2)
Y=([MiniPlayer-Background:H]-[ProgressBar-Container:H]*2-[#Item-Padding]*[#MiniPlayer-Scale])

[MiniPlayer-ProgressBar]
Meter=Shape
Meterstyle=Base
Shape=Rectangle 0,0,[ProgressBar-Container:W],[ProgressBar-Container:H],(2*[#MiniPlayer-Scale]) | FillColor [#MiniPlayer-Bar-Color] | StrokeWidth 0 
Shape2=Rectangle 0,0,([ProgressBar-Container:W]/100*[MeasureProgress:]),[ProgressBar-Container:H],(2*[#MiniPlayer-Scale]) | FillColor [#MiniPlayer-Bar-Active-Color] | StrokeWidth 0 
LeftMouseDownAction =[!SetOption MiniPlayer-Calc Formula "(Clamp($MouseX:%$,0,100))"][!UpdateMeasure MiniPlayer-Calc][!CommandMeasure MeasureProgress "SetPosition [MiniPlayer-Calc]"][!UpdateMeasure MeasureProgress][!UpdateMeter MiniPlayer-ProgressBar][!UpdateMeter MiniPlayer-Progress][!Redraw]
Container=ProgressBar-Container

[MiniPlayer-Progress]
Meter=String
MeterStyle=Base | String
StringAlign=RightCenter
X=([ProgressBar-Container:X]-[#Item-Padding]*[#MiniPlayer-Scale])
Y=(2*[#MiniPlayer-Scale])r
Text=[MeasurePosition]

[MiniPlayer-Duration]
Meter=String
MeterStyle=Base | String
StringAlign=LeftCenter
X=([ProgressBar-Container:X]+[ProgressBar-Container:W]+[#Item-Padding]*[#MiniPlayer-Scale])
y=r
Text=[MeasureDuration]
; ==========================================================================================

[MiniPlayer-PlayPause]
Meter=Image
MeterStyle=Base | Icon
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\[MeasurePlayPause].png
ImageTint=[#Button-[&MeasurePlayPause]-Color]
X=([MiniPlayer-Background:W]/2-[MiniPlayer-PlayPause:W]/2)
Y=([#Item-Padding]*[#MiniPlayer-Scale])
LeftMouseUpAction=[!CommandMeasure MeasurePlayPause "PlayPause"]

[MiniPlayer-Previous]
Meter=Image
MeterStyle=Base | Icon
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\previous.png
ImageTint=[#Button-Previous-Color]
X=(-[MiniPlayer-Previous:W]-([#Item-Padding]+2)*[#MiniPlayer-Scale])r
Y=r
LeftMouseUpAction=[!CommandMeasure MeasurePlayPause "Previous"]

[MiniPlayer-Next]
Meter=Image
MeterStyle=Base | Icon
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\Next.png
ImageTint=[#Button-Next-Color]
X=([MiniPlayer-Background:W]/2-[MiniPlayer-PlayPause:W]/2+[MiniPlayer-Next:W]+([#Item-Padding]+2)*[#MiniPlayer-Scale])
Y=r
LeftMouseUpAction=[!CommandMeasure MeasurePlayPause "Next"]

[MiniPlayer-Shuffle]
Meter=Image
MeterStyle=Base
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\shuffle.png
ImageTint=[#Button-Shuffle-Color[&MeasureShuffle]],([MeasureShuffle]=0?100:255)
X=([MiniPlayer-Background:W]/2-[MiniPlayer-PlayPause:W]/2-[MiniPlayer-Previous:W]-[MiniPlayer-Shuffle:W]-([#Item-Padding]+4)*[#MiniPlayer-Scale]-6*[#MiniPlayer-Scale])
Y=(3*[#MiniPlayer-Scale])r
W=(14*[#MiniPlayer-Scale])
H=(14*[#MiniPlayer-Scale])
; Toggles shuffle if possible
LeftMouseUpAction=[!CommandMeasure MeasurePlayPause "Shuffle"]

[MiniPlayer-Repeat]
Meter=Image
MeterStyle=Base
ImageTint=[#Button-Repeat-Color[&MeasureRepeat]],([MeasureRepeat]=0?100:255)
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\repeat[&MeasureRepeat].png
X=([MiniPlayer-Background:W]/2-[MiniPlayer-PlayPause:W]/2+[MiniPlayer-Next:W]+[MiniPlayer-Repeat:W]+([#Item-Padding]+2)*2*[#MiniPlayer-Scale]+8*[#MiniPlayer-Scale])
Y=r
W=(14*[#MiniPlayer-Scale])
H=(14*[#MiniPlayer-Scale])
LeftMouseUpAction=[!CommandMeasure MeasurePlayPause "Repeat"]

[MiniPlayer-Dots]
Meter=Shape
MeterStyle=Base
Shape=Rectangle ([MiniPlayer-Shuffle:X]+[MiniPlayer-Shuffle:W]/2-1.5*[#MiniPlayer-Scale]),([MiniPlayer-Shuffle:Y]+[MiniPlayer-Shuffle:H]+1*[#MiniPlayer-Scale]),(3*[#MiniPlayer-Scale]),(3*[#MiniPlayer-Scale]),(2*[#MiniPlayer-Scale]) | FillColor [#Button-Shuffle-Color1],([MeasureShuffle:]=0?0:255) | StrokeWidth 0
Shape2=Rectangle ([MiniPlayer-Repeat:X]+[MiniPlayer-Repeat:W]/2-1.5*[#MiniPlayer-Scale]),([MiniPlayer-Repeat:Y]+[MiniPlayer-Repeat:H]+1*[#MiniPlayer-Scale]),(3*[#MiniPlayer-Scale]),(3*[#MiniPlayer-Scale]),(2*[#MiniPlayer-Scale]) | FillColor [#Button-Repeat-Color1],([MeasureRepeat:]=0?0:255) | StrokeWidth 0

; ==========================================================================================

[MiniPlayer-Rating]
Meter=Image
MeterStyle=Base
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\rating[&MeasureRating].png
ImageTint=[#Buttom-Rating-Color[&MeasureRating]]
X=([MiniPlayer-SongTitle:X]+[MiniPlayer-Rating:W]/2+[#Item-Padding]*[#MiniPlayer-Scale]+(Clamp(([MiniPlayer-SongTitle:W]>=[MiniPlayer-SongArtist:W]?[MiniPlayer-SongTitle:W]:[MiniPlayer-SongArtist:W]),0,[SongInfo-Container:W])))
Y=([MiniPlayer-Background:H]/2-[MiniPlayer-Rating:H]/2)
W=(12*[#MiniPlayer-Scale])
H=(12*[#MiniPlayer-Scale])
LeftMouseDownAction=[#RatingAction[&MeasureRating]]
RightMouseUpAction=[#RatingAction1]

; ==========================================================================================

[VolumeBar-Container]
Meter=Shape
Meterstyle=Base
Shape=Rectangle 0,0,[#VolumeBar-Width],(2*[#MiniPlayer-Scale]),(1*[#MiniPlayer-Scale]) | FillColor 255,255,255 | StrokeWidth 0
X=([MiniPlayer-Background:W]-[VolumeBar-Container:W]-[MiniPlayer-Volume:W]-[#Item-Padding]*2*[#MiniPlayer-Scale])
Y=([MiniPlayer-Background:H]/2-[VolumeBar-Container:H]/2)

[MiniPlayer-VolumeBar]
Meter=Shape
Meterstyle=Base
Shape=Rectangle 0,0,[VolumeBar-Container:W],(2*[#MiniPlayer-Scale]),(2*[#MiniPlayer-Scale]) | FillColor [#Bar-Volume-Background-Color] | StrokeWidth 0 
Shape2=Rectangle 0,0,([VolumeBar-Container:W]/100*[MeasureVolume:]),(2*[#MiniPlayer-Scale]),(2*[#MiniPlayer-Scale]) | FillColor [#Bar-Volume-Color] | StrokeWidth 0
LeftMouseDownAction =[!SetOption MiniPlayer-Calc Formula "(Clamp($MouseX:%$,0,100))"][!UpdateMeasure MiniPlayer-Calc][!CommandMeasure MeasureVolume "SetVolume [MiniPlayer-Calc]"][!UpdateMeasure MeasureVolume][!UpdateMeter MiniPlayer-VolumeBar][!UpdateMeasure MiniPlayer-Volume][!Redraw]
Container=VolumeBar-Container

[MiniPlayer-Volume]
Meter=String
MeterStyle=Base | String
InlineSetting3= Size | (7*[#MiniPlayer-Scale])
x=([MiniPlayer-Background:W]-[MiniPlayer-Volume:W]-[#Item-Padding]*[#MiniPlayer-Scale])
y=([#Item-Padding]*[#MiniPlayer-Scale]+[MiniPlayer-Volume:H]/2)
H=([MiniPlayer-Background:H]-[AlbumArt-Container:Y]*2)
W=(30*[#MiniPlayer-Scale])
FontColor=[#Text-Volume-Percent-Color]
Text=[MeasureVolume]%
ClipString=0

[MiniPlayer-VolumeIcon]
Meter=Image
MeterStyle=Base
ImageName=#@#Images[#MiniPlayer-Foreground-Shadow]\volume.png
ImageTint=[#Button-Volume-Color]
X=([VolumeBar-Container:X]-[MiniPlayer-VolumeIcon:W]-[#Item-Padding]/2*[#MiniPlayer-Scale])
Y=([MiniPlayer-Background:H]/2-[MiniPlayer-VolumeIcon:H]/2)
W=(14*[#MiniPlayer-Scale])
H=(14*[#MiniPlayer-Scale])
